// configuration file for IJVM Assembler
0x02	BIPUSH byte	// Push byte onto stack
0x2F	DUP		// Copy top word on stack; push onto stack
0x5F	GOTO label	// Unconditional jump
0x37	IADD		// Pop two words from stack; push their sum
0x49	IAND		// Pop two words from stack; push Boolean AND
0x52	IFEQ label	// Pop word from stack; branch if it is zero
0x55	IFLT label	// Pop word from stack; branch if it is less than zero
0x59	IF_ICMPEQ label	// Pop two words from stack; branch if equal
0x4C	IINC varnum const	// Add a constant to a local variable
0x09	ILOAD varnum	// Push local variable onto stack
0x6F	INVOKEVIRTUAL offset	// Invoke a method
0x6C	IOR		// Pop two words from stack; push Boolean OR
0x64	IRETURN		// Return from method with integer value
0x1A	ISTORE varnum	// Pop word from stack; store in local variable
0x3A	ISUB		// Pop two words from stack; push their difference
0x05	LDC_W index	// Push constant from constant pool onto stack
0x00	NOP		// Do nothing
0x2C	POP		// Delete word on top of stack
0x31	SWAP		// Swap the two top words on the stack
0x85	WIDE		// Prefix instruction; next instruction has 16-bit index
0xFF	HALT		// halt the simulator
0xFE 	ERR		// print ERROR and halt
0xFD	OUT		// Pop a word from the stack and use the low order 8-bits as an ASCI character to display on screen
0xFC	IN		// Read a character from standard input and put it in the low order 8-bits of a word pushed onto the stack
0x12	IALOAD 		// Load from an array
0x24	IASTORE		// Store to an array
0x3D	IMUL		// Pop two words from stack; push their product
0x86    NEWARRAY    //Create new array on the heap Pop the array length and put the index
0x8D    SOUT    //Print stack till negative value is found
0x96    INVERT //Invert the sign of the top of the stack
0x99    RARRAY //Read From stack array index and restore it on the stack (Array legth is stored in element 0 of array)
