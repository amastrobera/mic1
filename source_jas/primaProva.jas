//Angelo Mastroberardino
//cp: 10429624

.constant
            OBJREF 0xCAFE               //lots of it ...
.end-constant

.main

.var
            cur
            num
            rMin
            rMax
            rSum
            rAvg
            rCntMin
            rCntMax
            prev
.end-var

            LDC_W OBJREF    //end of loop
            
input:                      //insert the list here
            BIPUSH 1
            BIPUSH 2
            BIPUSH 1
            BIPUSH 1


init:       BIPUSH 0        //default value: num=0 (to be update in the loop)
            ISTORE num

            LDC_W OBJREF
            INVOKEVIRTUAL printListBegin
            POP

            DUP             //empty list: go to the end or store cur=first elem
            LDC_W OBJREF
            IF_ICMPEQ done
            ISTORE cur
            
            ILOAD cur       //default value: calcs=first elem, counter=1
            DUP
            DUP
            DUP
            ISTORE rMin
            ISTORE rMax
            ISTORE rSum
            ISTORE rAvg
            BIPUSH 1
            DUP
            ISTORE rCntMin
            ISTORE rCntMax

            LDC_W OBJREF        //print the current element
            ILOAD cur
            ILOAD num
            INVOKEVIRTUAL printListElem
            POP

            GOTO inc            //increment and begin the loop from elem 2

loop:       DUP
            LDC_W OBJREF
            IF_ICMPEQ done
            ISTORE cur

            LDC_W OBJREF        //print the current element
            ILOAD cur
            ILOAD num
            INVOKEVIRTUAL printListElem
            POP
            
            ILOAD rMin          //update min and count(min)
            ISTORE prev
            
            LDC_W OBJREF
            ILOAD cur
            ILOAD prev
            INVOKEVIRTUAL calcMin
            ISTORE rMin
            
            LDC_W OBJREF
            ILOAD rMin
            ILOAD prev
            ILOAD rCntMin
            INVOKEVIRTUAL updateCounterMin
            ISTORE rCntMin

            ILOAD rMax          //update max and count(max)
            ISTORE prev
            
            LDC_W OBJREF
            ILOAD cur
            ILOAD prev
            INVOKEVIRTUAL calcMax
            ISTORE rMax
            
            LDC_W OBJREF
            ILOAD rMax
            ILOAD prev
            ILOAD rCntMax
            INVOKEVIRTUAL updateCounterMax
            ISTORE rCntMax

            ILOAD cur           //update sum
            ILOAD rSum
            IADD
            ISTORE rSum
            
inc:        IINC num 1          //update num elem counter
            GOTO loop


calcAvg:    LDC_W OBJREF
            ILOAD rSum
            ILOAD num
            INVOKEVIRTUAL divide
            ISTORE rAvg
            GOTO print

done:       LDC_W OBJREF
            INVOKEVIRTUAL printListEnd
            POP
            GOTO calcAvg


print:      LDC_W OBJREF
            ILOAD rMin
            ILOAD rMax
            ILOAD rAvg
            ILOAD rCntMin
            ILOAD rCntMax
            INVOKEVIRTUAL printResults
            POP

            HALT
.end-main


//calc functions

.method calcMin(cur,rMin)
        ILOAD cur
        ILOAD rMin
        ISUB
        IFLT update
        ILOAD rMin
        GOTO end
        
update: ILOAD cur

end:    IRETURN
.end-method


.method calcMax(cur,rMax)
        ILOAD rMax
        ILOAD cur
        ISUB
        IFLT update
        ILOAD rMax
        GOTO end
        
update: ILOAD cur

end:    IRETURN
.end-method


.method updateCounterMin(cur,prev,counter)
        ILOAD cur           //if elem == previous increate by 1
        ILOAD prev
        IF_ICMPEQ update
        
        LDC_W OBJREF
        ILOAD cur           //else check if we have a new min or not
        ILOAD prev
        INVOKEVIRTUAL calcMin
        ILOAD prev
same:   IF_ICMPEQ end       //if the min is still the same do nothing

new:    BIPUSH 1            //else, new min: assign 1 default value
        ISTORE counter
        GOTO end
                
update: IINC counter 1
        
end:    ILOAD counter
        IRETURN
.end-method


.method updateCounterMax(cur,prev,counter)
        ILOAD cur           //if elem == previous increate by 1
        ILOAD prev
        IF_ICMPEQ update
        
        LDC_W OBJREF
        ILOAD cur           //else check if we have a new max or not
        ILOAD prev
        INVOKEVIRTUAL calcMax
        ILOAD prev
same:   IF_ICMPEQ end       //if the max is still the same do nothing

new:    BIPUSH 1            //else, new max: assign 1 default value
        ISTORE counter
        GOTO end
                
update: IINC counter 1
        
end:    ILOAD counter
        IRETURN
.end-method


.method divide(n1,n2)
.var
            remain
            counter
.end-var

            BIPUSH 0
            ISTORE counter

            ILOAD n1
            ISTORE remain
            
            ILOAD n2
            IFEQ divzero

loop:       ILOAD remain
            ILOAD n2        //divisor
            ISUB
            ISTORE remain        
            ILOAD remain
            IFLT done
            IINC counter 1
            GOTO loop

divzero:    LDC_W OBJREF    //if division by zero return objref 
            ISTORE counter

done:       ILOAD counter
            IRETURN
.end-method




//printing fuctions

.method printListBegin()  //elenco: {
    BIPUSH 0x65
    OUT
    BIPUSH 0x6C
    OUT
    BIPUSH 0x65
    OUT
    BIPUSH 0x6E
    OUT
    BIPUSH 0x63
    OUT
    BIPUSH 0x6F
    OUT
    
    BIPUSH 0x3A
    OUT
    BIPUSH 0x20
    OUT

    BIPUSH 0x7B
    OUT

    IRETURN
.end-method

.method printListElem(cur,num)  //,elem        
        BIPUSH 0
        ILOAD num
        IF_ICMPEQ elem
        BIPUSH 0x2C         //print "," before new elem, unless first
        OUT

elem:   LDC_W OBJREF
        ILOAD cur
        INVOKEVIRTUAL printNum

        IRETURN
.end-method

.method printListEnd() //} -> cr
    BIPUSH 0x7D
    OUT

    BIPUSH 0x20
    OUT
    BIPUSH 0x2D
    OUT
    BIPUSH 0x3E
    OUT
    
    BIPUSH 0xA
    OUT

    IRETURN
.end-method


.method printResults(rMin,rMax,rAvg,rCntMin,rCntMax)
    LDC_W OBJREF
    ILOAD rMin
    ILOAD rMax
    INVOKEVIRTUAL printMinMax
    
    LDC_W OBJREF
    ILOAD rAvg
    INVOKEVIRTUAL printAvg

    LDC_W OBJREF
    ILOAD rCntMin
    ILOAD rCntMax
    INVOKEVIRTUAL printCntMinMax

    IRETURN    
.end-method


.method printMinMax(rMin, rMax)
//A) MIN: 1, MAX: 4
        BIPUSH 0x41
        OUT
        BIPUSH 0x29
        OUT
        BIPUSH 0x20
        OUT

        BIPUSH 0x4D
        OUT
        BIPUSH 0x49
        OUT
        BIPUSH 0x4E
        OUT
        BIPUSH 0x3A
        OUT
        BIPUSH 0x20
        OUT
        LDC_W OBJREF
        ILOAD rMin
        INVOKEVIRTUAL printNum

        BIPUSH 0x2C
        OUT
        BIPUSH 0x20
        OUT
        
        BIPUSH 0x4D
        OUT
        BIPUSH 0x41
        OUT
        BIPUSH 0x58
        OUT
        BIPUSH 0x3A
        OUT
        BIPUSH 0x20
        OUT
        LDC_W OBJREF
        ILOAD rMax
        INVOKEVIRTUAL printNum

        BIPUSH 0xA
        OUT 
        
        IRETURN
.end-method

.method printAvg(rAvg)
//B) AVG: 5
        BIPUSH 0x42
        OUT
        BIPUSH 0x29
        OUT
        BIPUSH 0x20
        OUT

        BIPUSH 0x41
        OUT
        BIPUSH 0x56
        OUT
        BIPUSH 0x47
        OUT
        BIPUSH 0x3A
        OUT
        BIPUSH 0x20
        OUT
        LDC_W OBJREF
        ILOAD rAvg
        INVOKEVIRTUAL printNum
        
        BIPUSH 0xA
        OUT 
        
        IRETURN
.end-method

.method printCntMinMax(rCntMin, rCntMax)
//C) NMIN: 1, NMAX: 4
        BIPUSH 0x43
        OUT
        BIPUSH 0x29
        OUT
        BIPUSH 0x20
        OUT

        BIPUSH 0x4E
        OUT
        BIPUSH 0x4D
        OUT
        BIPUSH 0x49
        OUT
        BIPUSH 0x4E
        OUT
        BIPUSH 0x3A
        OUT
        BIPUSH 0x20
        OUT
        LDC_W OBJREF
        ILOAD rCntMin
        INVOKEVIRTUAL printNum

        BIPUSH 0x2C
        OUT
        BIPUSH 0x20
        OUT

        BIPUSH 0x4E
        OUT
        BIPUSH 0x4D
        OUT
        BIPUSH 0x41
        OUT
        BIPUSH 0x58
        OUT
        BIPUSH 0x3A
        OUT
        BIPUSH 0x20
        OUT
        LDC_W OBJREF
        ILOAD rCntMax
        INVOKEVIRTUAL printNum

        
        BIPUSH 0xA
        OUT 
        
        IRETURN
.end-method


.method printNum(n)
.var
    q
    oldn
.end-var

	ILOAD n         // oldn = n
	ISTORE oldn
    ILOAD n         // See if n == 0
	IFEQ zero
    BIPUSH 0x0      // Otherwise, we have a real number and need to divide to 
    ISTORE q        // convert it to decimal	

divide_loop:        // We do that by looping up to 9 times
	ILOAD n         // End if n is less than 10
	BIPUSH 0xA
	ISUB
	IFLT divide_done
	IINC n -10      // Subtract ten from n, add one to the quotient
	IINC q 1
	GOTO divide_loop

divide_done:        // Now, we have the first digit of the decimal number 
	ILOAD q         // in q and the second is left in n
	IFEQ q_is_zero  // if q is zero, skip printing the first digit
	BIPUSH 0x30     // print the first digit
	ILOAD q
	IADD
	OUT

q_is_zero:	
	ILOAD n         // Print the second digit
	BIPUSH 0x30
	IADD
	OUT
	GOTO number_done
	
zero:               // If we made it here, n == 0. So, instead of printing out
	BIPUSH 0x4E     // '0' we print out 'No'
	OUT
	BIPUSH 0x6F
	OUT

number_done:

	IRETURN
.end-method
