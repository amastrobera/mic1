//todo:
//      make functions generic for any number of variables
//          * printList
//          * min
//          * max
//          * avg
//          * count

//Angelo Mastroberardino
//cp: 10429624

.constant
    OBJREF 0xCAFE               //lots of it ...
.end-constant

.main

.var
    var1
    var2
    var3
    var4
    rMin
    rMax
    rAvg
    rCntMin
    rCntMax
.end-var

init:       BIPUSH 32
            ISTORE var1
            BIPUSH 12
            ISTORE var2
            BIPUSH 90
            ISTORE var3
            BIPUSH 12
            ISTORE var4
            
            BIPUSH 0         //default value for all: null in ascii
            DUP
            DUP
            DUP
            DUP
            ISTORE rMin
            ISTORE rMax
            ISTORE rAvg
            ISTORE rCntMin
            ISTORE rCntMax


list:       LDC_W OBJREF
            ILOAD var1
            ILOAD var2
            ILOAD var3
            ILOAD var4
            INVOKEVIRTUAL printList

calcMin:    LDC_W OBJREF
            ILOAD var1
            ILOAD var2
            ILOAD var3
            ILOAD var4
            INVOKEVIRTUAL min
            ISTORE rMin

calcMax:    LDC_W OBJREF
            ILOAD var1
            ILOAD var2
            ILOAD var3
            ILOAD var4
            INVOKEVIRTUAL max
            ISTORE rMax

            LDC_W OBJREF
            ILOAD rMin
            ILOAD rMax
            INVOKEVIRTUAL printMinMax


calcAvg:    LDC_W OBJREF
            ILOAD var1
            ILOAD var2
            ILOAD var3
            ILOAD var4
            INVOKEVIRTUAL avg
            ISTORE rAvg
            
            LDC_W OBJREF
            ILOAD rAvg
            INVOKEVIRTUAL printAvg


cntMin:     LDC_W OBJREF
            ILOAD rMin
            ILOAD var1
            ILOAD var2
            ILOAD var3
            ILOAD var4
            INVOKEVIRTUAL count
            ISTORE rCntMin

cntMin:     LDC_W OBJREF
            ILOAD rMax
            ILOAD var1
            ILOAD var2
            ILOAD var3
            ILOAD var4
            INVOKEVIRTUAL count
            ISTORE rCntMax

            LDC_W OBJREF
            ILOAD rCntMin
            ILOAD rCntMax
            INVOKEVIRTUAL printCntMinMax


//print:      LDC_W OBJREF
//            ILOAD rMin
//            ILOAD rMax
//            ILOAD rAvg
//            ILOAD rCntMin
//            ILOAD rCntMax
//            INVOKEVIRTUAL printResults

done:       HALT
.end-main


//calc functions
.method min(e1,e2,e3,e4)
.var
        rVal
.end-var

start:  ILOAD e1
        ISTORE rVal

        LDC_W OBJREF        
        ILOAD e4
        ILOAD e3
        ILOAD e2
        ILOAD e1

iter:   DUP
        LDC_W OBJREF
        IF_ICMPEQ ret       //end-condition
        DUP
        ILOAD rVal
        ISUB
        IFLT calc
        POP                 //keep current min
        GOTO iter
calc:   ISTORE rVal         //new min
        GOTO iter

ret:    POP                 //remove end-loop value
        ILOAD rVal
        IRETURN
.end-method


.method max(e1,e2,e3,e4)
.var
        rVal
.end-var

start:  ILOAD e1
        ISTORE rVal

        LDC_W OBJREF        
        ILOAD e4
        ILOAD e3
        ILOAD e2
        ILOAD e1

iter:   DUP
        LDC_W OBJREF
        IF_ICMPEQ ret       //end-condition
        DUP
        ILOAD rVal
        ISUB
        IFLT calc
        ISTORE rVal         //new max
        GOTO iter
calc:   POP                 //keep current max
        GOTO iter

ret:    POP                 //remove end-loop value
        ILOAD rVal
        IRETURN
.end-method


.method avg(e1,e2,e3,e4)
.var
            sum
            num
            ret
.end-var

init:       BIPUSH 4
            ISTORE num
            BIPUSH 0
            ISTORE sum
            BIPUSH 0
            ISTORE ret
            
            LDC_W OBJREF
            ILOAD e4
            ILOAD e3
            ILOAD e2
            ILOAD e1

loop:       DUP
            LDC_W OBJREF
            IF_ICMPEQ endloop
            ILOAD sum
            IADD
            ISTORE sum
            GOTO loop
endloop:    POP
          
            LDC_W OBJREF
            ILOAD sum
            ILOAD num
            INVOKEVIRTUAL divide
            ISTORE ret

            ILOAD ret
            IRETURN
.end-method


.method divide(n1,n2)
.var
            remain
            counter
.end-var

            BIPUSH 0
            ISTORE counter

            ILOAD n1
            ISTORE remain
            
            ILOAD n2
            IFEQ divzero

loop:       ILOAD remain
            ILOAD n2        //divisor
            ISUB
            ISTORE remain        
            ILOAD remain
            IFLT done
            IINC counter 1
            GOTO loop

divzero:    LDC_W OBJREF
            ISTORE counter

done:       ILOAD counter
            IRETURN
.end-method



.method count(rVal,e1,e2,e3,e4)
.var 
    cnt
.end-var

        BIPUSH 0
        ISTORE cnt

        LDC_W OBJREF //init value
        ILOAD e1
        ILOAD e2
        ILOAD e3
        ILOAD e4

loop:   DUP
        LDC_W OBJREF        //end-of-loop condition
        IF_ICMPEQ done
        ILOAD rVal          //found value to count
        IF_ICMPEQ add
        GOTO loop

add:    IINC cnt 1
        GOTO loop

done:   POP         //remove init value
        ILOAD cnt
        IRETURN
.end-method


//printing fuctions

.method printList(e1,e2,e3,e4)
//elenco: {1,2,3,4} ->
    BIPUSH 0x65
    OUT
    BIPUSH 0x6C
    OUT
    BIPUSH 0x65
    OUT
    BIPUSH 0x6E
    OUT
    BIPUSH 0x63
    OUT
    BIPUSH 0x6F
    OUT
    
    BIPUSH 0x3A
    OUT
    BIPUSH 0x20
    OUT

    BIPUSH 0x7B
    OUT
    LDC_W OBJREF
    ILOAD e1
    INVOKEVIRTUAL printNum
    BIPUSH 0x2C
    OUT
    LDC_W OBJREF
    ILOAD e2
    INVOKEVIRTUAL printNum
    BIPUSH 0x2C
    OUT
    LDC_W OBJREF
    ILOAD e3
    INVOKEVIRTUAL printNum
    BIPUSH 0x2C
    OUT
    LDC_W OBJREF
    ILOAD e4
    INVOKEVIRTUAL printNum
    BIPUSH 0x7D
    OUT

    BIPUSH 0x20
    OUT
    BIPUSH 0x2D
    OUT
    BIPUSH 0x3E
    OUT
    
    BIPUSH 0xA
    OUT

    IRETURN
.end-method

.method printResults(rMin,rMax,rAvg,rCntMin,rCntMax)

    LDC_W OBJREF
    ILOAD rMin
    ILOAD rMax
    INVOKEVIRTUAL printMinMax
    
    LDC_W OBJREF
    ILOAD rAvg
    INVOKEVIRTUAL printAvg

    LDC_W OBJREF
    ILOAD rCntMin
    ILOAD rCntMax
    INVOKEVIRTUAL printCntMinMax

    IRETURN    
.end-method


.method printMinMax(rMin, rMax)
//A) MIN: 1, MAX: 4
        BIPUSH 0x41
        OUT
        BIPUSH 0x29
        OUT
        BIPUSH 0x20
        OUT

        BIPUSH 0x4D
        OUT
        BIPUSH 0x49
        OUT
        BIPUSH 0x4E
        OUT
        BIPUSH 0x3A
        OUT
        BIPUSH 0x20
        OUT
        LDC_W OBJREF
        ILOAD rMin
        INVOKEVIRTUAL printNum

        BIPUSH 0x2C
        OUT
        BIPUSH 0x20
        OUT
        
        BIPUSH 0x4D
        OUT
        BIPUSH 0x41
        OUT
        BIPUSH 0x58
        OUT
        BIPUSH 0x3A
        OUT
        BIPUSH 0x20
        OUT
        LDC_W OBJREF
        ILOAD rMax
        INVOKEVIRTUAL printNum

        BIPUSH 0xA
        OUT 
        
        IRETURN
.end-method

.method printAvg(rAvg)
//B) AVG: 5
        BIPUSH 0x42
        OUT
        BIPUSH 0x29
        OUT
        BIPUSH 0x20
        OUT

        BIPUSH 0x41
        OUT
        BIPUSH 0x56
        OUT
        BIPUSH 0x47
        OUT
        BIPUSH 0x3A
        OUT
        BIPUSH 0x20
        OUT
        LDC_W OBJREF
        ILOAD rAvg
        INVOKEVIRTUAL printNum
        
        BIPUSH 0xA
        OUT 
        
        IRETURN
.end-method

.method printCntMinMax(rCntMin, rCntMax)
//C) NMIN: 1, NMAX: 4
        BIPUSH 0x43
        OUT
        BIPUSH 0x29
        OUT
        BIPUSH 0x20
        OUT

        BIPUSH 0x4E
        OUT
        BIPUSH 0x4D
        OUT
        BIPUSH 0x49
        OUT
        BIPUSH 0x4E
        OUT
        BIPUSH 0x3A
        OUT
        BIPUSH 0x20
        OUT
        LDC_W OBJREF
        ILOAD rCntMin
        INVOKEVIRTUAL printNum

        BIPUSH 0x2C
        OUT
        BIPUSH 0x20
        OUT

        BIPUSH 0x4E
        OUT
        BIPUSH 0x4D
        OUT
        BIPUSH 0x41
        OUT
        BIPUSH 0x58
        OUT
        BIPUSH 0x3A
        OUT
        BIPUSH 0x20
        OUT
        LDC_W OBJREF
        ILOAD rCntMax
        INVOKEVIRTUAL printNum

        
        BIPUSH 0xA
        OUT 
        
        IRETURN
.end-method


.method printNum(n)
.var
    q
    oldn
.end-var

	ILOAD n         // oldn = n
	ISTORE oldn
    ILOAD n         // See if n == 0
	IFEQ zero
    BIPUSH 0x0      // Otherwise, we have a real number and need to divide to 
    ISTORE q        // convert it to decimal	

divide_loop:        // We do that by looping up to 9 times
	ILOAD n         // End if n is less than 10
	BIPUSH 0xA
	ISUB
	IFLT divide_done
	IINC n -10      // Subtract ten from n, add one to the quotient
	IINC q 1
	GOTO divide_loop

divide_done:        // Now, we have the first digit of the decimal number 
	ILOAD q         // in q and the second is left in n
	IFEQ q_is_zero  // if q is zero, skip printing the first digit
	BIPUSH 0x30     // print the first digit
	ILOAD q
	IADD
	OUT

q_is_zero:	
	ILOAD n         // Print the second digit
	BIPUSH 0x30
	IADD
	OUT
	GOTO number_done
	
zero:               // If we made it here, n == 0. So, instead of printing out
	BIPUSH 0x4E     // '0' we print out 'No'
	OUT
	BIPUSH 0x6F
	OUT

number_done:

	IRETURN
.end-method
