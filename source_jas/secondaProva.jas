//Angelo Mastroberardino
//cp: 10429624
//TEST of function SUMDIF

.constant
            OBJREF 0xCAFE
.end-constant


.main

.var
        result
.end-var

//A) (1,1,1) -> (1)
test1:
    BIPUSH 4    //data list (copied again)
    BIPUSH 1
    BIPUSH 1
    SUMDIF       //instruction to test
    
    ISTORE result
    LDC_W OBJREF
    ILOAD result
    INVOKEVIRTUAL printNum
    ILOAD result
    
    BIPUSH 5    //expected result
    ISUB
    IFEQ pass1
    LDC_W OBJREF
    INVOKEVIRTUAL printFail
    POP
    GOTO test2
    
pass1:
    LDC_W OBJREF
    INVOKEVIRTUAL printPass
    POP

test2:
    BIPUSH 1    //data list (copied again)
    BIPUSH 2
    BIPUSH 1
    SUMDIF       //instruction to test

    ISTORE result
    LDC_W OBJREF
    ILOAD result
    INVOKEVIRTUAL printNum
    ILOAD result
    
    BIPUSH 3    //expected result
    ISUB
    IFEQ pass2
    LDC_W OBJREF
    INVOKEVIRTUAL printFail
    POP
    GOTO test3

pass2:
    LDC_W OBJREF
    INVOKEVIRTUAL printPass
    POP

test3:
    BIPUSH 1    //data list (copied again)
    BIPUSH 1
    BIPUSH 3
    SUMDIF       //instruction to test

    ISTORE result
    LDC_W OBJREF
    ILOAD result
    INVOKEVIRTUAL printNum
    ILOAD result
    
    BIPUSH 4    //expected result
    ISUB
    IFEQ pass3
    LDC_W OBJREF
    INVOKEVIRTUAL printFail
    POP
    GOTO end

pass3:
    LDC_W OBJREF
    INVOKEVIRTUAL printPass
    POP


end:
    POP
    HALT
        
.end-main



//helper methods

//test 1: SUMDIF{1,1,1} -> 1
.method printTestDataBegin(testNum)  //TEST 1: SUMDIF{
    BIPUSH 0x54
    OUT
    BIPUSH 0x45
    OUT
    BIPUSH 0x53
    OUT
    BIPUSH 0x54
    OUT
    BIPUSH 0x20
    OUT
    LDC_W OBJREF
    ILOAD testNum
    INVOKEVIRTUAL printNum
    BIPUSH 0x3A
    OUT
    BIPUSH 0x20
    OUT
    BIPUSH 0x73
    OUT
    BIPUSH 0x75
    OUT
    BIPUSH 0x6D
    OUT
    BIPUSH 0x69
    OUT
    BIPUSH 0x66
    OUT
    BIPUSH 0x7B
    OUT
    IRETURN
.end-method

.method printTestDataElement(elem) //1,
    LDC_W OBJREF
    ILOAD elem
    INVOKEVIRTUAL printNum
    BIPUSH 0x2C
    OUT
    IRETURN
.end-method


.method printTestDataEnd(expRes,boolStuff) //} -> 1
    BIPUSH 0x7D
    OUT
    BIPUSH 0x20
    OUT
    BIPUSH 0x2D
    OUT
    BIPUSH 0x3E
    OUT
    BIPUSH 0x20
    OUT
    ILOAD boolStuff
    IFEQ cont
    LDC_W OBJREF
    INVOKEVIRTUAL printStuff
cont:
    LDC_W OBJREF
    ILOAD expRes
    INVOKEVIRTUAL printNum
    BIPUSH 0xA
    OUT
    IRETURN
.end-method


.method printStuff() //...,
    BIPUSH 0x2E
    OUT
    BIPUSH 0x2E
    OUT
    BIPUSH 0x2E
    OUT
    BIPUSH 0x2C
    OUT
    IRETURN
.end-method


.method printPass()
    BIPUSH 0x50
    OUT
    BIPUSH 0x61
    OUT
    BIPUSH 0x73
    OUT
    BIPUSH 0x73
    OUT
    BIPUSH 0xA
    OUT
    IRETURN    
.end-method

.method printFail()
    BIPUSH 0x46
    OUT
    BIPUSH 0x61
    OUT
    BIPUSH 0x69
    OUT
    BIPUSH 0x6C
    OUT
    BIPUSH 0xA
    OUT
    IRETURN
.end-method


.method printNum(n)
.var
    q
    oldn
.end-var

	ILOAD n         // oldn = n
	ISTORE oldn
    ILOAD n         // See if n == 0
	IFEQ zero
    BIPUSH 0x0      // Otherwise, we have a real number and need to divide to 
    ISTORE q        // convert it to decimal	

divide_loop:        // We do that by looping up to 9 times
	ILOAD n         // End if n is less than 10
	BIPUSH 0xA
	ISUB
	IFLT divide_done
	IINC n -10      // Subtract ten from n, add one to the quotient
	IINC q 1
	GOTO divide_loop

divide_done:        // Now, we have the first digit of the decimal number 
	ILOAD q         // in q and the second is left in n
	IFEQ q_is_zero  // if q is zero, skip printing the first digit
	BIPUSH 0x30     // print the first digit
	ILOAD q
	IADD
	OUT

q_is_zero:	
	ILOAD n         // Print the second digit
	BIPUSH 0x30
	IADD
	OUT
	GOTO number_done
	
zero:               // If we made it here, n == 0. So, instead of printing out
	BIPUSH 0x4E     // '0' we print out 'No'
	OUT
	BIPUSH 0x6F
	OUT

number_done:

	IRETURN
.end-method

